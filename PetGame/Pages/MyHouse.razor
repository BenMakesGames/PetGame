@using PetGame.Database
@using PetGame.Services
@using Microsoft.EntityFrameworkCore
@using PetGame.Database.Tables
@using PetGame.Dialogs

@page "/my-house"
@attribute [Authorize]

<PageTitle>Pet Game - My House</PageTitle>

<h1>My House</h1>

@if (MyPets == null)
{
    <p><em>Loading pets...</em></p>
}
else
{
    <div class="pets">
        @foreach (var pet in MyPets)
        {
            <div>
                <PetCard
                    Image="@pet.Image"
                    Name="@pet.Name"
                    Level="pet.Level"
                    Health="pet.Health"
                    MaxHealth="pet.MaxHealth"
                />
                <button type="button" @onclick="() => DoFeed(pet)">Feed</button>
                <button type="button" @onclick="() => DoFight(pet)">Fight</button>
            </div>
        }
    </div>
}

@code {

    [CascadingParameter] public IModalService Modals { get; set; } = null!;
    [Inject] public IDbContextFactory<PetGameDatabase> DbFactory { get; set; } = null!;
    [Inject] public CurrentPlayer Player { get; set; } = null!;
    [Inject] public NavigationManager Navigator { get; set; } = null!;

    private List<Pet>? MyPets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();

        MyPets = await db.Pets
            .Where(p => p.OwnerId == Player.Info!.Id)
            .ToListAsync();
    }

    private async Task DoFight(Pet pet)
    {
        var db = await DbFactory.CreateDbContextAsync();

        var battle = await db.Battles
            .Where(b => b.PlayerId == Player.Info!.Id)
            .FirstOrDefaultAsync();

        if(battle != null)
        {
            Navigator.NavigateTo("/battle");
            return;
        }

        var newBattle = new Battle()
        {
            PlayerId = Player.Info!.Id,
            PetId = pet.Id,
            MonsterName = "Goblin",
            MonsterHealth = 10,
            MonsterMaxHealth = 10,
            MonsterAttackDice = 1,
            MonsterAttackDiceSides = 4,
            MonsterAttackBonus = 0,
        };
        
        db.Add(newBattle);
        
        await db.SaveChangesAsync();
        
        Navigator.NavigateTo("/battle");
    }

    private async Task DoFeed(Pet pet)
    {
        if(pet.Health >= pet.MaxHealth)
        {
            Alert.Show(Modals, "Oops!", $"{pet.Name} is already at max energy.");
            return;
        }

        pet.Health = Math.Clamp(pet.Health + 3, 0, pet.MaxHealth);

        Alert.Show(Modals, "Omnomnom!", $"{pet.Name} is now at {pet.Health} HP.");

        await using var db = await DbFactory.CreateDbContextAsync();

        db.Update(pet);

        await db.SaveChangesAsync();
    }
}