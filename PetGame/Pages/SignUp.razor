@using FluentValidation
@using Microsoft.EntityFrameworkCore
@using PetGame.Database
@using PetGame.Database.Tables
@using PetGame.Dialogs
@using PetGame.Services

@page "/sign-up"

<PageTitle>Pet Game - Sign Up</PageTitle>

<h1>Sign Up</h1>

<EditForm Model="FormData" OnValidSubmit="DoSignUp">
    <FluentValidationValidator />

    <p>
        <label>Your Name</label>
        <InputText @bind-Value="FormData.Name"/>
        <ValidationMessage For="() => FormData.Name" />
    </p>

    <p>
        <label>Your Pet's Name</label>
        <InputText @bind-Value="FormData.FirstPetName"/>
        <ValidationMessage For="() => FormData.FirstPetName" />
    </p>

    <p>
        <label>Email Address</label>
        <InputText @bind-Value="FormData.EmailAddress"/>
        <ValidationMessage For="() => FormData.EmailAddress" />
    </p>

    <p>
        <label>Password</label>
        <InputText @bind-Value="FormData.Password" type="password" />
        <ValidationMessage For="() => FormData.Password" />
    </p>

    <p>
        <button type="submit">Sign Up</button>
    </p>
</EditForm>

@code {

    [Inject] public IDbContextFactory<PetGameDatabase> DbFactory { get; set; } = null!;
    [Inject] public CurrentPlayer Player { get; set; } = null!;
    [Inject] public NavigationManager Navigator { get; set; } = null!;

    [CascadingParameter] public IModalService Modals { get; set; } = null!;

    private SignUpData FormData { get; } = new();

    private async Task DoSignUp()
    {
        await using var database = await DbFactory.CreateDbContextAsync();
        
        if(await database.Players.AnyAsync(p => p.EmailAddress == FormData.EmailAddress))
        {
            Alert.Show(Modals, "Sorry :(", "That email address is already in use!");
            return;
        }

        var hashedPassword = Security.HashPassword(FormData.Password);

        var player = new Player()
        {
            Name = FormData.Name,
            EmailAddress = FormData.EmailAddress,
            Password = hashedPassword
        };

        var pet = new Pet()
        {
            Name = FormData.FirstPetName,
            Image = "little-guy", // TODO: allow player to select their pet's appearance?
            Owner = player
        };

        database.Add(player);
        database.Add(pet);

        await database.SaveChangesAsync();

        var logInResult = await Player.LogInAsync(FormData.EmailAddress, FormData.Password);

        if(!logInResult.Success)
        {
            Alert.Show(Modals, "Oops!", logInResult.Message);
            return;
        }
        
        Navigator.NavigateTo("/my-house");
    }

    public sealed class SignUpData
    {
        public string Name { get; set; } = "";
        public string FirstPetName { get; set; } = "";
        public string EmailAddress { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public sealed class SignUpFormValidator : AbstractValidator<SignUpData>
    {
        public SignUpFormValidator()
        {
            RuleFor(r => r.Name).NotEmpty();
            RuleFor(r => r.FirstPetName).NotEmpty();
            RuleFor(r => r.EmailAddress).EmailAddress();
            RuleFor(r => r.Password).MinimumLength(10).WithMessage("Password must be at least 10 characters long.");
        }
    }
}